using EntityFramework.Explained._Tools.Helpers;
using Microsoft.EntityFrameworkCore;
using QuickPulse.Explains;
using QuickPulse.Explains.Text;
// Model and appdbcontext generated by AI


[DocFile]
public class ValueObjectProperties
{
    // Value Object: CustomerName
    public class CustomerName
    {
        public string FirstName { get; private set; }
        public string LastName { get; private set; }

        private CustomerName() { }
        public CustomerName(string firstName, string lastName)
        {
            if (string.IsNullOrWhiteSpace(firstName)) throw new ArgumentException("First name is required");
            if (string.IsNullOrWhiteSpace(lastName)) throw new ArgumentException("Last name is required");

            FirstName = firstName;
            LastName = lastName;
        }

        // Equality methods omitted for brevity
    }

    // Value Object: Address
    public class Address
    {
        public string Street { get; private set; }
        public string City { get; private set; }
        public string PostalCode { get; private set; }

        private Address() { }
        public Address(string street, string city, string postalCode)
        {
            Street = street;
            City = city;
            PostalCode = postalCode;
        }

        // Equality methods omitted for brevity
    }

    // Aggregate Root: Order
    public class Order
    {
        public int Id { get; private set; }
        public CustomerName CustomerName { get; private set; }
        public Address ShippingAddress { get; private set; }
        public DateTime OrderDate { get; private set; }

        private Order() { }
        public Order(CustomerName customerName, Address shippingAddress)
        {
            CustomerName = customerName;
            ShippingAddress = shippingAddress;
            OrderDate = DateTime.UtcNow;
        }

        // Other domain logic here...
    }




    public class AppDbContext : DbContext
    {
        public DbSet<Order> Orders { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("DoesNotMatter"); // Required by EF, never actually used
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Order>(order =>
            {
                order.HasKey(o => o.Id);

                order.OwnsOne(o => o.CustomerName, cn =>
                {
                    cn.Property(c => c.FirstName).HasColumnName("CustomerFirstName").IsRequired();
                    cn.Property(c => c.LastName).HasColumnName("CustomerLastName").IsRequired();
                });

                order.OwnsOne(o => o.ShippingAddress, addr =>
                {
                    addr.Property(a => a.Street).HasColumnName("Street").IsRequired();
                    addr.Property(a => a.City).HasColumnName("City").IsRequired();
                    addr.Property(a => a.PostalCode).HasColumnName("PostalCode").IsRequired();
                });
            });
        }
    }


    [Fact]
    [DocHeader("Value Objects")]
    [DocContent("checking what SQL is generated for value objects in model")]
    public void VOChecker()
    {
        using var context = new AppDbContext();
        var sql = context.Database.GenerateCreateScript();
        var reader = LinesReader.FromText(sql);
        Assert.Equal("CREATE TABLE [Orders] (", reader.NextLine());
        Assert.Equal("    [Id] int NOT NULL IDENTITY,", reader.NextLine());
        Assert.Equal("    [CustomerFirstName] nvarchar(max) NOT NULL,", reader.NextLine());
        Assert.Equal("    [CustomerLastName] nvarchar(max) NOT NULL,", reader.NextLine());
        Assert.Equal("    [Street] nvarchar(max) NOT NULL,", reader.NextLine());
        Assert.Equal("    [City] nvarchar(max) NOT NULL,", reader.NextLine());
        Assert.Equal("    [PostalCode] nvarchar(max) NOT NULL,", reader.NextLine());
        Assert.Equal("    [OrderDate] datetime2 NOT NULL,", reader.NextLine());
        Assert.Equal("    CONSTRAINT [PK_Orders] PRIMARY KEY ([Id])", reader.NextLine());
        Assert.Equal(");", reader.NextLine());
        Assert.Equal("GO", reader.NextLine());
    }
}